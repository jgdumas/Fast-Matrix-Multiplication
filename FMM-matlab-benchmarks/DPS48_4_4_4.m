function C = DPS48_4_4_4(A, B, nmin, peeling, level)
NTH2ROOT2once=nthroot(2,2);
NTH2ROOT2o2=nthroot(2,2)/2;
NTH2ROOT2t2o=2/nthroot(2,2);
NTH2ROOT2t1o=1/nthroot(2,2);
NTH2ROOT2o4=nthroot(2,2)/4;
NTH2ROOT2o8=nthroot(2,2)/8;
NTH2ROOT2o16=nthroot(2,2)/16;
NTH2ROOT2o3=nthroot(2,2)/3;
NTH2ROOT2f2o3=nthroot(2,2)*2/3;

if nargin < 3, nmin = 4; end    % Threshold to conventional
if nargin < 4, peeling = 1; end % Static (1) or Dynamic (2) peeling
if nargin < 5, level = 8; end   % Verbose level
[m,k] = size(A); [k2,n] = size(B);
if (k2 ~= k), error('Incompatible matrix dimensions.'); end
% Recursively cuts into nmin*4^l x nmin*4^l x nmin*4^l blocks, with decreasing maximal l
if (m<=nmin)||(k<=nmin)||(n<=nmin)||(m<4)||(k<4)||(n<4)
  % fprintf("# MM Direct: %d x %d x %d\n",m,k,n)
  C = A*B;
else
  C = zeros(m,n);
  mu=m-rem(m,4);ku=k-rem(k,4);nu=n-rem(n,4);
  l=ceil(min([log(mu)/log(4),log(ku)/log(4),log(nu)/log(4)]));
  if (peeling == 1)
    l = min([floor(log(m/nmin)/log(4)),floor(log(k/nmin)/log(4)),floor(log(n/nmin)/log(4))]);
    mu=nmin*4^l; ku=nmin*4^l; nu=nmin*4^l;
  end
  if (mu < m) || (ku < k) || (nu < n)
    % fprintf("# Core SubMatrix[%d]: %d x %d x %d\n",l,mu,ku,nu)
    C(1:mu,1:nu)=DPS48_4_4_4(A(1:mu,1:ku),B(1:ku,1:nu),nmin, peeling, level);
    if (m > mu)
      % fprintf("# MM peel m: %d x %d x %d\n",m-mu,k,n)
      C(mu+1:m,1:n)=C(mu+1:m,1:n)+DPS48(A(mu+1:m,1:k),B,nmin, peeling, level);
    end
    if (k > ku) && (mu > 0) && (nu > 0)
      % fprintf("# MM peel k: %d x %d x %d\n",mu,k-ku,nu)
      C(1:mu,1:nu)=C(1:mu,1:nu)+DPS48(A(1:mu,ku+1:k),B(ku+1:k,1:nu),nmin, peeling, level);
    end
    if (n > nu) && (mu > 0)
      % fprintf("# MM peel n: %d x %d x %d\n",mu,k,n-nu)
      C(1:mu,nu+1:n)=C(1:mu,nu+1:n)+DPS48(A(1:mu,1:k),B(1:k,nu+1:n),nmin, peeling, level);
    end
  else
    if l>=level, fprintf("# Core<4;4;4>[%d]: %d x %d x %d\n",l,m,k,n); end

[m,n] = size(A);
m0 = 0; m1 = 1*m/4; m2 = 2*m/4; m3 = 3*m/4; m4 = m;
 r0 = m0+1:m1; r1 = m1+1:m2; r2 = m2+1:m3; r3 = m3+1:m4;
n0 = 0; n1 = 1*n/4; n2 = 2*n/4; n3 = 3*n/4; n4 = n;
 c0 = n0+1:n1; c1 = n1+1:n2; c2 = n2+1:n3; c3 = n3+1:n4;
t16 = A(r0,c2)+A(r1,c0);
t17 = A(r0,c1)+A(r2,c0);
t18 = A(r1,c3)+A(r3,c2);
t19 = A(r2,c3)-A(r3,c1);
t20 = A(r0,c3)+A(r1,c1);
t21 = A(r1,c2)+A(r3,c3);
t22 = A(r2,c2)+A(r3,c0);
t23 = A(r0,c3)-A(r1,c1);
t24 = A(r2,c2)-A(r3,c0);
t25 = A(r0,c0)+A(r2,c1);
t26 = t17-t18;
t27 = t16-t19;
t28 = t17+t18;
t29 = t16+t19;
t31 = A(r0,c2)-A(r1,c0);
t33 = A(r2,c1)-t21-A(r0,c0);
t34 = A(r0,c1)-A(r2,c0);
t35 = t21+t25;
t36 = t21-t25;
t37 = A(r2,c3)+A(r3,c1);
t38 = A(r1,c2)+t25-A(r3,c3);
t39 = A(r1,c3)-A(r3,c2);
t40 = t24-t26;
t41 = t22-t23;
t42 = t20-t24;
t43 = t20-t28;
t44 = t24+t26;
t45 = t20+t24;
t46 = t20+t28;
t47 = t22+t23;
t48 = t33+t34;
t49 = t35+t37;
t50 = t19-t36;
t51 = t38+t39;
t52 = t35-t37;
t53 = t19+t36;
t54 = t38-t39;
t55 = t33-t34;
t56 = t22+t46;
oA34 = t22-t46;
oA21 = t27+t41;
oA14 = t45-t29;
oA3 = t23+t40;
t61 = t23-t40;
oA8 = t22-t43;
t63 = t23+t44;
oA31 = t47-t29;
t65 = t29+t47;
t66 = t29+t45;
oA43 = t27-t42;
oA18 = t41-t27;
t69 = t22+t43;
oA27 = t23-t44;
t71 = t27+t42;
t72 = t31+t50;
t73 = t16-t49;
t74 = t17+t54;
t75 = t18+t55;
t76 = t31+t53;
t77 = t16-t52;
t78 = t17-t54;
t79 = t16+t49;
t80 = t16+t52;
t81 = t17+t51;
t82 = t18+t48;
t83 = t31-t53;
t84 = t18-t48;
t85 = t17-t51;
t86 = t31-t50;
t87 = t18-t55;
oA0 = -oA27-t80;
oA1 = t63-t72;
oA2 = t78-oA14;
oA4 = t61-t73;
oA5 = oA18-t85;
oA6 = t87-t71;
oA7 = t74-oA21;
oA9 = oA43-t82;
oA10 = oA31-t75;
oA11 = -t65;
oA12 = oA43+t82;
oA13 = t76-oA3;
oA15 = t65-t84;
oA16 = -t56;
oA17 = t85+oA18;
oA19 = t75+oA31;
oA20 = t77-t69;
oA22 = t66-t81;
oA23 = oA8+t83;
oA24 = -t61;
oA25 = t80-oA27;
oA26 = -t56-t79;
oA28 = t83-oA8;
oA29 = -oA3-t76;
oA30 = -t63-t72;
oA32 = t61+t73;
oA33 = t69;
oA35 = oA21+t74;
oA36 = t66+t81;
oA37 = -t66;
oA38 = t71+t87;
oA39 = -t63;
oA40 = t65+t84;
oA41 = -t69-t77;
oA42 = t78+oA14;
oA44 = t86-oA34;
oA45 = oA34+t86;
oA46 = t56-t79;
oA47 = -t71;

[m,n] = size(B);
m0 = 0; m1 = 1*m/4; m2 = 2*m/4; m3 = 3*m/4; m4 = m;
 r0 = m0+1:m1; r1 = m1+1:m2; r2 = m2+1:m3; r3 = m3+1:m4;
n0 = 0; n1 = 1*n/4; n2 = 2*n/4; n3 = 3*n/4; n4 = n;
 c0 = n0+1:n1; c1 = n1+1:n2; c2 = n2+1:n3; c3 = n3+1:n4;
t16 = B(r2,c2)+B(r2,c3);
t17 = B(r3,c2)+B(r3,c3);
t18 = B(r2,c2)-B(r2,c3);
t19 = B(r2,c1)-B(r3,c1);
t20 = B(r2,c0)+B(r3,c0);
t21 = B(r0,c2)-B(r0,c3);
t22 = B(r2,c1)+B(r3,c1);
t23 = B(r2,c0)-B(r3,c0);
t24 = B(r0,c0)+B(r0,c1);
t25 = B(r1,c2)-B(r1,c3);
t27 = B(r3,c2)-B(r3,c3);
t28 = t16+t17;
t29 = t17-t16;
r32 = (B(r1,c0)+B(r1,c1))*NTH2ROOT2o2;
t32 = r32-t21;
t34 = B(r0,c1)*NTH2ROOT2once-B(r1,c3)-B(r1,c2);
t37 = B(r0,c0)*NTH2ROOT2once-t25;
t38 = t27-t18;
t39 = B(r0,c3)+B(r0,c2)-B(r1,c1)*NTH2ROOT2once;
t41 = t18+t27;
t42 = t21-B(r1,c0)*NTH2ROOT2once;
r43 = t19*NTH2ROOT2once;
r44 = t20*NTH2ROOT2once;
r45 = t22*NTH2ROOT2once;
r46 = t23*NTH2ROOT2once;
r48 = (t23-t19-t24)*NTH2ROOT2o2;
r49 = (t24+t20-t22)*NTH2ROOT2o2;
oB2 = r43+t29;
oB5 = t41-r45;
oB6 = t34-t39;
oB7 = r46-t38;
oB9 = t39+t34;
oB11 = t25+t32-r49;
oB14 = t29-r32-r48;
oB15 = t42+t37;
oB17 = t41-r44;
oB19 = t37-t42;
oB22 = t28-r44;
oB31 = t32-r48-t25;
oB35 = t38-r43;
oB36 = t28+r45;
oB37 = t28-r32-r49;
oB42 = r46-t29;
v48 = oB15+oB5;
v49 = oB19-oB35;
v50 = oB22-oB6;
v51 = oB42-oB9;
g52 = v49/2;
v52 = oB31-g52;
g53 = v51/2;
v53 = oB14+g53;
g54 = v48/2;
v54 = oB11+g54;
g55 = v50/2;
v55 = oB37-g55;
oB24 = v53+g55;
oB8 = g55-v53;
oB21 = v49-oB31;
oB34 = v55+g53;
oB16 = v54-g52;
oB18 = oB11+v48;
oB3 = v54+g52;
v63 = v52+g54;
oB39 = v52-g54;
oB27 = v55-g53;
v66 = oB36-oB37;
v67 = oB7-oB21;
v68 = oB14+oB42;
v69 = oB11+oB15;
v70 = oB2-oB14;
v71 = oB22-oB37;
v72 = oB19-oB31;
v73 = oB17-oB18;
oB26 = oB16+v66;
oB40 = oB17-v54*2;
oB1 = oB39+v68;
oB13 = v70-oB3;
oB23 = v72-oB8;
oB25 = oB27+v72;
oB28 = oB8-v73;
oB29 = v71-oB3;
oB32 = v69-oB24;
oB30 = v66-oB39;
oB46 = oB16+v68;
oB33 = v63;
oB47 = v50-oB37;
oB41 = v71-v63;
oB38 = v55*2-oB36;
oB12 = v53*2-oB2;
oB10 = -oB7-v52*2;
oB0 = oB27-v73;
oB45 = v67-oB34;
oB4 = oB24+v67;
oB44 = v69-oB34;
oB43 = -oB14-v51;
oB20 = v63+v70;

iC0 = DPS48( oA0, oB0, nmin, peeling, level);
iC1 = DPS48( oA1, oB1, nmin, peeling, level);
iC2 = DPS48( oA2, oB2, nmin, peeling, level);
iC3 = DPS48( oA3, oB3, nmin, peeling, level);
iC4 = DPS48( oA4, oB4, nmin, peeling, level);
iC5 = DPS48( oA5, oB5, nmin, peeling, level);
iC6 = DPS48( oA6, oB6, nmin, peeling, level);
iC7 = DPS48( oA7, oB7, nmin, peeling, level);
iC8 = DPS48( oA8, oB8, nmin, peeling, level);
iC9 = DPS48( oA9, oB9, nmin, peeling, level);
iC10 = DPS48( oA10, oB10, nmin, peeling, level);
iC11 = DPS48( oA11, oB11, nmin, peeling, level);
iC12 = DPS48( oA12, oB12, nmin, peeling, level);
iC13 = DPS48( oA13, oB13, nmin, peeling, level);
iC14 = DPS48( oA14, oB14, nmin, peeling, level);
iC15 = DPS48( oA15, oB15, nmin, peeling, level);
iC16 = DPS48( oA16, oB16, nmin, peeling, level);
iC17 = DPS48( oA17, oB17, nmin, peeling, level);
iC18 = DPS48( oA18, oB18, nmin, peeling, level);
iC19 = DPS48( oA19, oB19, nmin, peeling, level);
iC20 = DPS48( oA20, oB20, nmin, peeling, level);
iC21 = DPS48( oA21, oB21, nmin, peeling, level);
iC22 = DPS48( oA22, oB22, nmin, peeling, level);
iC23 = DPS48( oA23, oB23, nmin, peeling, level);
iC24 = DPS48( oA24, oB24, nmin, peeling, level);
iC25 = DPS48( oA25, oB25, nmin, peeling, level);
iC26 = DPS48( oA26, oB26, nmin, peeling, level);
iC27 = DPS48( oA27, oB27, nmin, peeling, level);
iC28 = DPS48( oA28, oB28, nmin, peeling, level);
iC29 = DPS48( oA29, oB29, nmin, peeling, level);
iC30 = DPS48( oA30, oB30, nmin, peeling, level);
iC31 = DPS48( oA31, oB31, nmin, peeling, level);
iC32 = DPS48( oA32, oB32, nmin, peeling, level);
iC33 = DPS48( oA33, oB33, nmin, peeling, level);
iC34 = DPS48( oA34, oB34, nmin, peeling, level);
iC35 = DPS48( oA35, oB35, nmin, peeling, level);
iC36 = DPS48( oA36, oB36, nmin, peeling, level);
iC37 = DPS48( oA37, oB37, nmin, peeling, level);
iC38 = DPS48( oA38, oB38, nmin, peeling, level);
iC39 = DPS48( oA39, oB39, nmin, peeling, level);
iC40 = DPS48( oA40, oB40, nmin, peeling, level);
iC41 = DPS48( oA41, oB41, nmin, peeling, level);
iC42 = DPS48( oA42, oB42, nmin, peeling, level);
iC43 = DPS48( oA43, oB43, nmin, peeling, level);
iC44 = DPS48( oA44, oB44, nmin, peeling, level);
iC45 = DPS48( oA45, oB45, nmin, peeling, level);
iC46 = DPS48( oA46, oB46, nmin, peeling, level);
iC47 = DPS48( oA47, oB47, nmin, peeling, level);
v72 = iC37+iC14;
b8 = iC46-iC26+iC16*2;
b9 = iC16+iC3;
v73 = iC39-iC33;
b11 = iC20-iC41+iC33*2;
v67 = iC34-iC27;
b12 = iC0+iC25+iC27*2;
v71 = iC8+iC24;
v69 = iC43+iC47;
v68 = iC18+iC21;
b17 = iC24*2+iC4-iC32;
v75 = iC11-iC31;
v62 = iC26-v75;
v60 = iC4-v69;
b31 = iC10-iC19+iC31*2+v71-v72+v67;
b33 = iC6-iC38+iC47*2-b9-v73-v68;
b39 = iC36+iC37*2+iC41+iC22-b9+v73+v62;
b43 = iC25-iC35-iC7-iC21*2+v71-v67+v60;
b44 = iC19-iC41+v75+b12+b33;
b45 = iC10+b17+v62+b33;
b46 = iC6-iC25+v69+b11+b31;
b47 = iC38+b8+v60+b31;
b48 = b8+b43-v72-iC36;
b49 = iC22+v72-b11+b43;
b50 = b17+b39-v68-iC7;
b51 = iC35+v68-b12+b39;
z45 = iC45+b47-iC36;
z44 = iC44+iC0+iC38+b48;
z42 = iC42-b48;
z40 = iC40-iC26-b44;
z30 = iC30+iC7-b45;
z29 = iC29+b44-iC35;
z28 = iC28+b49-iC6-iC32;
z23 = iC23+b46-iC22;
z17 = iC17-b51;
z15 = iC15+b45-iC41;
z13 = iC13+b51-iC19-iC46;
z12 = iC12+iC4+b46;
z9 = iC9+b47-iC25;
z5 = iC5+b50;
z2 = iC2+b49;
z1 = iC1+iC10-iC20+b50;
t37 = (z44+z13)/8;
t36 = (-z42-z2)*NTH2ROOT2o16;
t35 = (z45-z44)*NTH2ROOT2o16;
t34 = (-z40-z15)*NTH2ROOT2o16;
t33 = (z9-z12)*NTH2ROOT2o16;
t32 = (-z28-z23)*NTH2ROOT2o16;
t31 = (z28-z1)/8;
oC11 = (z9-z40)/8;
oC10 = (z12-z15)/8;
t28 = (z17+z5)*NTH2ROOT2o16;
t27 = (z5+z2)/8;
t26 = (z29+z13)*NTH2ROOT2o16;
t25 = (-z30-z1)*NTH2ROOT2o16;
t23 = (-z45-z29)/8;
t22 = (-z30-z23)/8;
t20 = (-z42-z17)*NTH2ROOT2o16;
oC14 = (z2-z5)/8;
b76 = t35+t32+t28;
oC13 = t36+t28;
b77 = t36+t26-t25;
b78 = t33+t26+t25;
oC8 = t34+t33;
oC7 = (z17-z42)/8-t31+t23;
oC3 = t31+oC11+t23;
oC6 = t27-t22-t37;
oC2 = oC10+t22-t37;
b79 = t35-t32+t34;
oC9 = t33-t34;
oC12 = t20-t27*NTH2ROOT2o2;
oC15 = t20*NTH2ROOT2t2o;
oC1 = b78-b79;
oC0 = b78+b79;
oC5 = b77-b76;
oC4 = b77+b76;

C = [ oC0 oC1 oC2 oC3 ; oC4 oC5 oC6 oC7 ; oC8 oC9 oC10 oC11 ; oC12 oC13 oC14 oC15 ] ;
  end
end
end
