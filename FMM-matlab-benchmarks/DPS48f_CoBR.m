function M = DPS48f_CoBR(A, nmin, peeling, level)
  if nargin < 2, nmin = 4; end    % Threshold to conventional
  if nargin < 3, peeling = 1; end % Static (1) or Dynamic (2) peeling
  if nargin < 4, level = 8; end   % Verbose level
[m,n] = size(A);
if (m<=nmin)||(n<=nmin)||(m<4)||(n<4)
   M=A;
else
[m,n] = size(A);
m0 = 0; m1 = 1*m/4; m2 = 2*m/4; m3 = 3*m/4; m4 = m;
 r0 = m0+1:m1; r1 = m1+1:m2; r2 = m2+1:m3; r3 = m3+1:m4;
n0 = 0; n1 = 1*n/4; n2 = 2*n/4; n3 = 3*n/4; n4 = n;
 c0 = n0+1:n1; c1 = n1+1:n2; c2 = n2+1:n3; c3 = n3+1:n4;
tA0 = A(r0,c0);
tA1 = A(r0,c1);
tA2 = A(r0,c2);
tA3 = A(r0,c3);
tA4 = A(r1,c0);
tA5 = A(r1,c1);
tA6 = A(r1,c2);
tA7 = A(r1,c3);
tA8 = A(r2,c0);
tA9 = A(r2,c1);
tA10 = A(r2,c2);
tA11 = A(r2,c3);
tA12 = A(r3,c0);
tA13 = A(r3,c1);
tA14 = A(r3,c2);
tA15 = A(r3,c3);


iM0 = DPS48f_CoBR( tA0, nmin, peeling, level);
iM1 = DPS48f_CoBR( tA1, nmin, peeling, level);
iM2 = DPS48f_CoBR( tA2, nmin, peeling, level);
iM3 = DPS48f_CoBR( tA3, nmin, peeling, level);
iM4 = DPS48f_CoBR( tA4, nmin, peeling, level);
iM5 = DPS48f_CoBR( tA5, nmin, peeling, level);
iM6 = DPS48f_CoBR( tA6, nmin, peeling, level);
iM7 = DPS48f_CoBR( tA7, nmin, peeling, level);
iM8 = DPS48f_CoBR( tA8, nmin, peeling, level);
iM9 = DPS48f_CoBR( tA9, nmin, peeling, level);
iM10 = DPS48f_CoBR( tA10, nmin, peeling, level);
iM11 = DPS48f_CoBR( tA11, nmin, peeling, level);
iM12 = DPS48f_CoBR( tA12, nmin, peeling, level);
iM13 = DPS48f_CoBR( tA13, nmin, peeling, level);
iM14 = DPS48f_CoBR( tA14, nmin, peeling, level);
iM15 = DPS48f_CoBR( tA15, nmin, peeling, level);

t16 = iM5-iM13;
t17 = iM12-iM4;
t18 = iM0+iM8;
t19 = iM2+iM10;
t20 = iM1+iM9;
t21 = iM6+iM14;
t22 = iM6-iM14;
t23 = iM4+iM12;
t24 = iM0-iM8;
t25 = iM7-iM15;
t26 = iM5+iM13;
t27 = iM3+iM11;
t28 = iM2-iM10;
t29 = iM11-iM3;
t30 = iM1-iM9;
t31 = iM7+iM15;
oM1 = t16+t22;
oM6 = t23-t21;
oM8 = t19-t18;
oM11 = t20-t27;
oM14 = t24+t29;
oM15 = t26+t31;
oM16 = t16+t17+t18-t19*2+t20;
oM17 = t28+t30;
oM19 = t17-t22;
oM21 = t17-t25;
oM30 = t18+t27;
oM31 = t21-t26;
oM33 = t29-t30;
oM36 = t24+t28;
oM42 = t23-t31;
oM46 = t25-t16;
v47 = oM1-oM8;
v48 = oM36-oM31;
v49 = oM14-oM46;
v50 = oM6-oM17;
v51 = oM21-oM33;
v52 = oM42-oM11;
v53 = oM15+oM30;
v54 = oM16-v47;
oM23 = v49-v52;
oM39 = v48-v54;
oM44 = v52+v49;
oM20 = v47-v50;
g59 = oM16/2;
v59 = v47-g59;
oM27 = v51+v53;
oM35 = v54+v48;
oM25 = v53-v51;
oM22 = v50+v47;
v71 = oM19+v59;
v74 = oM8+g59;
g78 = oM23/2;
g79 = -oM39/2;
g80 = oM44/2;
g81 = -oM20/2;
g82 = oM27/2;
g83 = -oM35/2;
g84 = -oM25/2;
g85 = oM22/2;
g86 = (oM36+v50+oM31)/2;
g87 = (oM33-v49+oM21)/2;
g88 = (v51+oM14+oM46)/2;
g89 = (oM30-oM15-v52)/2;
g90 = (oM17-v48+oM6)/2;
g91 = (v53+oM11+oM42)/2;
oM5 = v50-v48;
oM9 = g82+g86;
oM4 = g87-g81;
oM24 = g82-v71;
oM12 = v74-g78;
oM29 = g78+g90;
oM13 = v51-v49;
oM3 = g91-g85;
oM28 = v59*2;
oM38 = g90-g84;
oM7 = g79-g87;
oM32 = g89-g79;
oM41 = g85+g88;
oM40 = g83+g88;
oM26 = v53+v52;
oM10 = g80-v71;
oM45 = v54-oM19;
oM34 = g86-g80;
oM18 = v50+v48;
oM2 = -v49-v51;
oM37 = g81+g89;
oM43 = g83+g91;
oM0 = v74-g84;

M = [ oM0 ; oM1 ; oM2 ; oM3 ; oM4 ; oM5 ; oM6 ; oM7 ; oM8 ; oM9 ; oM10 ; oM11 ; oM12 ; oM13 ; oM14 ; oM15 ; oM16 ; oM17 ; oM18 ; oM19 ; oM20 ; oM21 ; oM22 ; oM23 ; oM24 ; oM25 ; oM26 ; oM27 ; oM28 ; oM29 ; oM30 ; oM31 ; oM32 ; oM33 ; oM34 ; oM35 ; oM36 ; oM37 ; oM38 ; oM39 ; oM40 ; oM41 ; oM42 ; oM43 ; oM44 ; oM45 ; oM46 ] ;
end
