#####################################################################
# Fast-Matrix-Multiplication library
#   https://github.com/jgdumas/Fast-Matrix-Multiplication
#   Accurate fast matrix multiplications via 2x2 recursion
#   Authors:
#   [J-G. Dumas, C. Pernet, A. Sedoglavic;
#    Strassen's algorithm is not optimally accurate.
#    https://hal.science/hal-04441653]

# Generation of DPS_CoBL.m DPS_CoBR.m DPS_ICoB.m

# Program Automatically obtained with the PLinOpt library
#   https://github.com/jgdumas/plinopt
#   (run this program within the installed 'plinopt' directory)

# DPS_CoBL.m DPS_CoBR.m DPS_ICoB.m linear algorithms via associated
# PLinOpt L (left), R (right), P (product) matrices, which are:
#   left : data/CLo.sms
#   right: data/CRo.sms
#   prod.: data/CPo.sms


##########
# Pre-computation of the alt. basis lhs straight-line program:
#   replace 1013 by sqrt(3)
#   replace [i0;i1;i2;i3] by [A(i,i);A(i,j);A(j,i);A(j,j)]
#   replace [o0;o1;o2;o3] by [M1,M2,M3,M4]

optimizer -E -N data/CLo.sms | compacter -s > data/CLo.slp

# 5	additions	instead of 5 	0.00166893s (0.004428 cpu) [3]
# 4	multiplications	instead of 7
##########

PMchecker -M data/CLo.sms data/CLo.slp

##########
# Pre-computation of the alt. basis rhs straight-line program:
#   replace 1013 by sqrt(3)
#   replace [i0;i1;i2;i3] by [A(i,i);A(i,j);A(j,i);A(j,j)]
#   replace [o0;o1;o2;o3] by [M1,M2,M3,M4]

optimizer -E -N data/CRo.sms | compacter -s > data/CRo.slp

# 5	additions	instead of 5 	0.00197005s (0.005239 cpu) [3]
# 4	multiplications	instead of 7
##########

PMchecker -M data/CRo.sms data/CRo.slp

##########
# Post-computation of the alt. basis product straight-line program:
#   replace 1013 by sqrt(3)
#   replace [i0;i1;i2;i3] by [M1,M2,M3,M4]
#   replace [o0;o1;o2;o3] by [S1,S2,S3,S4]

matrix-transpose data/CPo.sms | optimizer -E -N | transpozer | compacter -s > data/CPo.slp

# 5	additions (5+0)
# 4	multiplications
##########

PMchecker -M data/CPo.sms data/CPo.slp

#####################################################################
