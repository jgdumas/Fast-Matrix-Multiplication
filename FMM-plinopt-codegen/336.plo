#####################################################################
# Fast-Matrix-Multiplication library
#   https://github.com/jgdumas/Fast-Matrix-Multiplication
#   Accurate fast matrix multiplications via <3,3,6> recursion
#   Authors:
#   [J-G. Dumas, C. Pernet, A. Sedoglavic;
#    Strassen's algorithm is not optimally accurate;
#    ISSAC 2024, Raleigh, NC USA, pp. 254-263.
#    https://hal.science/hal-04441653]

# Automatic generation of <3;3;6>, <3;6;3>, <6;3;3>  variants

# Program Automatically obtained with the PLinOpt library
#   https://github.com/jgdumas/plinopt
#   (run this program within the installed 'plinopt' directory)

# linear algorithms description is provided via associated
# PLinOpt L (left), R (right), P (product) matrices, which are:
#   left : data/L_3x3x6_accurate.sms data/L_3x3x6.sms
#          data/L_3x6x3_accurate.sms data/L_3x6x3.sms
#          data/L_6x3x3_accurate.sms data/L_6x3x3.sms
#   right: data/R_3x3x6_accurate.sms data/R_3x3x6.sms
#          data/R_3x6x3_accurate.sms data/R_3x6x3.sms
#          data/R_6x3x3_accurate.sms data/R_6x3x3.sms
#   prod.: data/P_3x3x6_accurate.sms data/P_3x3x6.sms
#          data/P_3x6x3_accurate.sms data/P_3x6x3.sms
#          data/P_6x3x3_accurate.sms data/P_6x3x3.sms


########## 
# Classical <3;3;6>, <3;6;3>, <6;3;3> algorithms
#
./sms2matlab.sh -O 100000 data/L_3x3x6.sms data/R_3x3x6.sms data/P_3x3x6.sms data/FMM
./sms2matlab.sh -O 100000 data/L_3x6x3.sms data/R_3x6x3.sms data/P_3x6x3.sms data/FMM
./sms2matlab.sh -O 100000 data/L_6x3x3.sms data/R_6x3x3.sms data/P_6x3x3.sms data/FMM

cat > data/FMM.m<< EOF
function C = FMM(A, B, nmin, peeling, level)
%          Computes the product C = A*B,
%          via <3;3;6>, <3;6;3> or <6;3;3> fast algorithms.
  if nargin < 3, nmin = 4; end    % Threshold to conventional
  if nargin < 4, peeling = 1; end % Static (1) or Dynamic (2) peeling
  if nargin < 5, level = 8; end   % Verbose level
  [m,k] = size(A);
  [k,n] = size(B);
  if (m >= max(k,n))
    C=FMM_6_3_3(A, B, nmin, peeling, level);
  elseif (n >= max(m,k))
    C=FMM_3_3_6(A, B, nmin, peeling, level);
  else
    C=FMM_3_6_3(A, B, nmin, peeling, level);
  end
end
EOF

##########
# More accurate <3;3;6>, <3;6;3>, <6;3;3> algorithms
#
./sms2matlab.sh -O 100000 data/L_3x3x6_accurate.sms data/R_3x3x6_accurate.sms data/P_3x3x6_accurate.sms data/FMMa
./sms2matlab.sh -O 100000 data/L_3x6x3_accurate.sms data/R_3x6x3_accurate.sms data/P_3x6x3_accurate.sms data/FMMa
./sms2matlab.sh -O 100000 data/L_6x3x3_accurate.sms data/R_6x3x3_accurate.sms data/P_6x3x3_accurate.sms data/FMMa

cat > data/FMMa.m<< EOF
function C = FMMa(A, B, nmin, peeling, level)
%          Computes the product C = A*B,
%          via <3;3;6>, <3;6;3> or <6;3;3> fast & accurate algorithms.
  if nargin < 3, nmin = 4; end    % Threshold to conventional
  if nargin < 4, peeling = 1; end % Static (1) or Dynamic (2) peeling
  if nargin < 5, level = 8; end   % Verbose level
  [m,k] = size(A);
  [k,n] = size(B);
  if (m >= max(k,n))
    C=FMMa_6_3_3(A, B, nmin, peeling, level);
  elseif (n >= max(m,k))
    C=FMMa_3_3_6(A, B, nmin, peeling, level);
  else
    C=FMMa_3_6_3(A, B, nmin, peeling, level);
  end
end
EOF

########## 
# Faster <3;3;6>, <3;6;3>, <6;3;3> algorithms via alternative bases
#
./sms2matlab.sh -a -O 100000 data/L_3x3x6.sms data/R_3x3x6.sms data/P_3x3x6.sms data/FMM336
./sms2matlab.sh -a -O 100000 data/L_6x3x3.sms data/R_6x3x3.sms data/P_6x3x3.sms data/FMM633
./sms2matlab.sh -a -O 100000 data/L_3x6x3.sms data/R_3x6x3.sms data/P_3x6x3.sms data/FMM363

##########
# Faster & more accurate <3;3;6>, <3;6;3>, <6;3;3> algorithms via alternative bases
#
./sms2matlab.sh -a -O 100000 data/L_3x3x6_accurate.sms data/R_3x3x6_accurate.sms data/P_3x3x6_accurate.sms data/FMMa336
./sms2matlab.sh -a -O 100000 data/L_6x3x3_accurate.sms data/R_6x3x3_accurate.sms data/P_6x3x3_accurate.sms data/FMMa633
./sms2matlab.sh -a -O 100000 data/L_3x6x3_accurate.sms data/R_3x6x3_accurate.sms data/P_3x6x3_accurate.sms data/FMMa363


#####################################################################
