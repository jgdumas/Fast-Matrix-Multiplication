#!/bin/csh
# ==========================================================================
# Fast-Matrix-Multiplication library
# Authors: J-G. Dumas, C. Pernet, A. Sedoglavic
# ==========================================================================
# ==========================================================================
# Matlab Matrix Multiplication generator from Straight-Line Programs
# ==========================================================================
# Usage: L.slp R.slp P.slp m k n r name
#   MM of (m x k) times (k x n), using r multiplications
#   L.slp R.slp P.slp: left/right/product linear operators
#   L corresponds to a (r x (m.k)) matrix
#   R corresponds to a (r x (k.n)) matrix
#   P corresponds to a ((m.n) x r) matrix
#   produces 2 Matlab programs: 'name.m' and 'name_m_k_n.m'
# ==========================================================================
# Examples:
# ./MM.rpl /tmp/Lw.slp /tmp/Rw.slp /tmp/Pw.slp 2 2 2 7 SW
# ./MM.rpl L_3x3x6_52.slp R_3x3x6_106.slp P_3x3x6_107.slp 3 3 6 40 FMM
# ./MM.rpl L_3x6x3.slp R_3x6x3.slp P_3x6x3.slp 3 6 3 40 FMM
# ./MM.rpl L_6x3x3.slp R_6x3x3.slp P_6x3x3.slp 6 3 3 40 FMM
# ./MM.rpl L_3x3x6_accurate.slp R_3x3x6_accurate.slp P_3x3x6_accurate.slp 3 3 6 40 FMMa
# ./MM.rpl L_3x6x3_accurate.slp R_3x6x3_accurate.slp P_3x6x3_accurate.slp 3 6 3 40 FMMa
# ./MM.rpl L_6x3x3_accurate.slp R_6x3x3_accurate.slp P_6x3x3_accurate.slp 6 3 3 40 FMMa
# ==========================================================================

set Lslp = $1		# Left linear map
set Rslp = $2		# Right linear map
set Pslp = $3		# Product linear map
set m = $4		# LHS row dimension
set k = $5		# LHS column dimension & RHS row dimension
set n = $6		# RHS column dimension
set r = $7		# Tensor rank
set PathFname = $8	# Function name
# Warning, a 9th argument forces overwrite of ${PathFname}.m

set PathCname = "${PathFname}_${m}_${k}_${n}"
set Fname = `basename ${PathFname}`	# Function name
set Cname = "${Fname}_${m}_${k}_${n}"

echo "# Writing core algorithm to ${PathCname}.m"

cat > ${PathCname}.m<< EOF
function C = $Cname(A, B, nmin, peeling, level)
if nargin < 3, nmin = 4; end    % Threshold to conventional
if nargin < 4, peeling = 1; end % Static (1) or Dynamic (2) peeling
if nargin < 5, level = 8; end   % Verbose level
[m,k] = size(A); [k2,n] = size(B);
if (k2 ~= k), error('Incompatible matrix dimensions.'); end
% Recursively cuts into nmin*${m}^l x nmin*${k}^l x nmin*${n}^l blocks, with decreasing maximal l
if (m<=nmin)||(k<=nmin)||(n<=nmin)||(m<$m)||(k<$k)||(n<$n)
  % fprintf("# MM Direct: %d x %d x %d\n",m,k,n)
  C = A*B;
else
  C = zeros(m,n);
  mu=m-rem(m,$m);ku=k-rem(k,$k);nu=n-rem(n,$n);
  l=ceil(min([log(mu)/log($m),log(ku)/log($k),log(nu)/log($n)]));
  if (peeling == 1)
    l = min([floor(log(m/nmin)/log($m)),floor(log(k/nmin)/log($k)),floor(log(n/nmin)/log($n))]);
    mu=nmin*${m}^l; ku=nmin*${k}^l; nu=nmin*${n}^l;
  end
  if (mu < m) || (ku < k) || (nu < n)
    % fprintf("# Core SubMatrix[%d]: %d x %d x %d\n",l,mu,ku,nu)
    C(1:mu,1:nu)=${Cname}(A(1:mu,1:ku),B(1:ku,1:nu),nmin, peeling, level);
    if (m > mu)
      % fprintf("# MM peel m: %d x %d x %d\n",m-mu,k,n)
      C(mu+1:m,1:n)=C(mu+1:m,1:n)+${Fname}(A(mu+1:m,1:k),B,nmin, peeling, level);
    end
    if (k > ku) && (mu > 0) && (nu > 0)
      % fprintf("# MM peel k: %d x %d x %d\n",mu,k-ku,nu)
      C(1:mu,1:nu)=C(1:mu,1:nu)+${Fname}(A(1:mu,ku+1:k),B(ku+1:k,1:nu),nmin, peeling, level);
    end
    if (n > nu) && (mu > 0)
      % fprintf("# MM peel n: %d x %d x %d\n",mu,k,n-nu)
      C(1:mu,nu+1:n)=C(1:mu,nu+1:n)+${Fname}(A(1:mu,1:k),B(1:k,nu+1:n),nmin, peeling, level);
    end
  else
    if l>=level, fprintf("# Core<$m;$k;$n>[%d]: %d x %d x %d\n",l,m,k,n); end

EOF

./replacer $Lslp i o A $m $k $r 1 >> ${PathCname}.m
./replacer $Rslp i o B $k $n $r 1 >> ${PathCname}.m

set j = 0
while ( $j < $r )
   echo "iC$j = $Fname( oA$j, oB$j, nmin, peeling, level);" >> ${PathCname}.m
   @ j++
end
echo >> ${PathCname}.m

./replacer $Pslp i o C $m $n $r 0 >> ${PathCname}.m
cat >> ${PathCname}.m<< EOF
  end
end
end
EOF

if ( ($#argv <= 8) && ( -f ${PathFname}.m ) )then
    echo -n "Overwrite ${PathFname}.m (y/n)? "
    set answer = $<
    if ("$answer" != "y") then
	exit;
    endif
endif

echo "# Writing high-level MM routine to ${PathFname}.m"

cat > ${PathFname}.m<< EOF
function C = $Fname(A, B, nmin, peeling, level)
%          Computes the product C = A*B, with fast core: <$m;$k;$n>.
%          nmin   : threshold switch to conventional.
%          peeling: static peeling (1, by default) or dynamic (2).
%          level  : logging level.
  if nargin < 3, nmin = 4; end    % Threshold to conventional
  if nargin < 4, peeling = 1; end % Static (1) or Dynamic (2) peeling
  [m,k] = size(A); [k2,n] = size(B);
  if (k2 ~= k), error('Incompatible matrix dimensions.'); end
  if nargin < 5                   % Min level for verbose output
    level = min([floor(log(m/nmin)/log($m)),floor(log(k/nmin)/log($k)),floor(log(n/nmin)/log($n))]);
  end
  C=${Cname}(A,B,nmin,peeling,level);
end
EOF

echo "# <${m}x${k}x${n}:${r}> MM algorithm: ${PathCname}.m & ${PathFname}.m generated."
