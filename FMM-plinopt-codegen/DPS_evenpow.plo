#####################################################################
# Fast-Matrix-Multiplication library
#   https://github.com/jgdumas/Fast-Matrix-Multiplication
#   Accurate fast matrix multiplications via 2x2 recursion
#   Authors:
#   [J-G. Dumas, C. Pernet, A. Sedoglavic;
#    Strassen's algorithm is not optimally accurate.
#    https://hal.science/hal-04441653]

# Generation of DPS_evenpow.m

# Program Automatically obtained with the PLinOpt library
#   https://github.com/jgdumas/plinopt
#   (run this program within the installed 'plinopt' directory)

# DPS_evenpow.m linear algorithms description is provided via associated
# PLinOpt L (left), R (right), P (product) matrices, which are:
#   left : data/Ld.sms
#   right: data/Rd.sms
#   prod.: data/Pd.sms


##########
# Pre-computation of the lhs:
#   replace [i0;i1;i2;i3] by [A(i,i);A(i,j);A(j,i);A(j,j)]
#   replace [o0;o1;o2;o3;o4;o5;o6] by [PA0,PA1,PA2,PA3,PA4,PA5,PA6]

optimizer -E -N data/Ld.sms | compacter -s

# 8	additions	instead of 11 	0.296534s (1.026 cpu) [3]
# 2	multiplications	instead of 10
##########


##########
# Pre-computation of the rhs:
#   replace [i0;i1;i2;i3] by [B(i,i);B(i,j);B(j,i);B(j,j)]
#   replace [o0;o1;o2;o3;o4;o5;o6] by [PB0,PB1,PB2,PB3,PB4,PB5,PB6]

optimizer -E -N data/Rd.sms | compacter -s

# 8	additions	instead of 11 	0.289904s (1.02559 cpu) [3]
# 2	multiplications	instead of 10
##########


##########
# Pre-computation of the product:
#   replace [i0;i1;i2;i3;i4,i5,i6] by [d0,d1,d2,d3,d4,d5,d6]
#   replace [o0;o1;o2;o3] by [C11,C12,C21,C22]

matrix-transpose data/Pd.sms | optimizer -E -N | transpozer | compacter -s

# 11	additions (8+3)
# 2	multiplications
##########


#####################################################################
